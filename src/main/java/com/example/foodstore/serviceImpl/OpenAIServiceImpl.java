package com.example.foodstore.serviceImpl;

import com.example.foodstore.entity.Blog;
import com.example.foodstore.entity.Product;
import com.example.foodstore.repository.BlogRepository;
import com.example.foodstore.repository.ProductRepository;
import com.example.foodstore.service.OpenAIService;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Service
public class OpenAIServiceImpl implements OpenAIService {

    private static final Logger log = LoggerFactory.getLogger(OpenAIServiceImpl.class);

    @Value("${openai.api.key}")
    private String apiKey;

    private final ProductRepository productRepository;
    private final BlogRepository blogRepository;
    private final RestTemplate restTemplate;

    // Cache cho c√¢u tr·∫£ l·ªùi, h·∫øt h·∫°n sau 1 ng√†y, t·ªëi ƒëa 1000 m·ª•c
    private final Cache<String, String> responseCache = Caffeine.newBuilder()
            .expireAfterWrite(1, TimeUnit.DAYS)
            .maximumSize(1000)
            .build();

    // T·ª´ kh√≥a ƒë·ªÉ ph√¢n lo·∫°i c√¢u h·ªèi
    private static final List<String> PURCHASE_KEYWORDS = Arrays.asList("mua", "b√°n", "ƒë·∫∑t", "gi√°", "thanh to√°n", "gi·ªè h√†ng");
    private static final List<String> AVAILABILITY_KEYWORDS = Arrays.asList("c√≥ b√°n", "c√≥ kinh doanh", "c√≥ kh√¥ng");
    private static final List<String> USAGE_KEYWORDS = Arrays.asList("c√¥ng d·ª•ng", "t√°c d·ª•ng", "l·ª£i √≠ch", "dinh d∆∞·ª°ng");
    private static final List<String> RECIPE_KEYWORDS = Arrays.asList("m√≥n", "n·∫•u", "k·∫øt h·ª£p", "c√°ch l√†m", "l√†m","c√¥ng th·ª©c");
    private static final List<String> OPEN_QUESTION_INDICATORS = Arrays.asList(
            "b√† b·∫ßu", "ph·ª• n·ªØ mang thai", "tr·∫ª em", "tr·∫ª nh·ªè", "ng∆∞·ªùi gi√†", "b·ªánh", "ti·ªÉu ƒë∆∞·ªùng",
            "huy·∫øt √°p", "tim m·∫°ch", "gi·∫£m c√¢n", "tƒÉng c√¢n", "s·ª©c kh·ªèe", "ph√π h·ª£p", "t·ªët cho",
            "m·∫Øt", "da", "t√≥c", "x∆∞∆°ng", "ru·ªôt","mi·ªÖn d·ªãch", "ti√™u h√≥a", "vitamin", "kho√°ng ch·∫•t"
    );
    private static final List<String> NON_FOOD_KEYWORDS = Arrays.asList("xe m√°y", "ƒëi·ªán tho·∫°i", "qu·∫ßn √°o", "gi√†y d√©p");

    public OpenAIServiceImpl(ProductRepository productRepository, BlogRepository blogRepository) {
        this.productRepository = productRepository;
        this.blogRepository = blogRepository;
        this.restTemplate = new RestTemplate();
    }

    @Override
    public String getChatBotReply(String userMessage) {
        // Chu·∫©n h√≥a c√¢u h·ªèi
        String normalizedQuery = normalizeText(userMessage);
        log.info("Processing query: {}", userMessage);

        // Tr√≠ch xu·∫•t t√™n s·∫£n ph·∫©m
        String productName = extractProductName(normalizedQuery);
        log.info("Extracted productName: {}", productName);

        // Ki·ªÉm tra c√¢u h·ªèi kh√¥ng li√™n quan
        if (isClearlyNonFoodRelated(normalizedQuery) && productName == null) {
            return buildFriendlyReply(
                    "ü§ñ Xin l·ªói, m√¨nh ch·ªâ h·ªó tr·ª£ c√°c n·ªôi dung li√™n quan ƒë·∫øn th·ª±c ph·∫©m s·∫°ch, s·∫£n ph·∫©m, m√≥n ƒÉn ho·∫∑c dinh d∆∞·ª°ng. " +
                            "B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi: 'C√°ch n·∫•u b√≠ ƒë·ªè', 'Rau n√†o t·ªët cho s·ª©c kh·ªèe?', ho·∫∑c 'Mua khoai t√¢y ·ªü ƒë√¢u?' üå±",
                    null
            );
        }

        // Ph√¢n lo·∫°i v√† x·ª≠ l√Ω c√¢u h·ªèi
        try {
            String reply = classifyAndHandleQuery(normalizedQuery, productName, userMessage);
            return reply != null && !reply.isEmpty() ? reply : fetchChatGPTResponse(userMessage);
        } catch (Exception e) {
            log.error("Error processing query '{}': {}", userMessage, e.getMessage());
            return buildFriendlyReply("‚ö†Ô∏è Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau!", null);
        }
    }

    private String classifyAndHandleQuery(String normalizedQuery, String productName, String originalQuery) {
        // X√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi
        QueryType queryType = determineQueryType(normalizedQuery, productName);
        log.info("Query type: {}", queryType);

        switch (queryType) {
            case PURCHASE:
                return handlePurchaseQuery(normalizedQuery, productName);
            case AVAILABILITY:
                return handleAvailabilityQuery(productName);
            case OPEN_QUESTION:
                return handleOpenQuestion(originalQuery, productName);
            case USAGE:
                return handleUsageQuery(normalizedQuery, productName);
            case RECIPE:
                return handleRecipeQuery(normalizedQuery, productName);
            case GENERAL_PRODUCT:
                return handleGeneralProductQuery(productName);
            default:
                return "";
        }
    }

    private enum QueryType {
        PURCHASE, AVAILABILITY, OPEN_QUESTION, USAGE, RECIPE, GENERAL_PRODUCT, UNKNOWN
    }

    private QueryType determineQueryType(String normalizedQuery, String productName) {
        String cacheKey = "query_type:" + normalizedQuery;
        String cachedType = responseCache.getIfPresent(cacheKey);
        if (cachedType != null) {
            return QueryType.valueOf(cachedType);
        }

        if (PURCHASE_KEYWORDS.stream().anyMatch(normalizedQuery::contains)) {
            responseCache.put(cacheKey, QueryType.PURCHASE.name());
            return QueryType.PURCHASE;
        }
        if (productName != null && AVAILABILITY_KEYWORDS.stream().anyMatch(normalizedQuery::contains)) {
            responseCache.put(cacheKey, QueryType.AVAILABILITY.name());
            return QueryType.AVAILABILITY;
        }
        if (OPEN_QUESTION_INDICATORS.stream().anyMatch(normalizedQuery::contains)) {
            responseCache.put(cacheKey, QueryType.OPEN_QUESTION.name());
            return QueryType.OPEN_QUESTION;
        }
        if (USAGE_KEYWORDS.stream().anyMatch(normalizedQuery::contains)) {
            responseCache.put(cacheKey, QueryType.USAGE.name());
            return QueryType.USAGE;
        }
        if (RECIPE_KEYWORDS.stream().anyMatch(normalizedQuery::contains)) {
            responseCache.put(cacheKey, QueryType.RECIPE.name());
            return QueryType.RECIPE;
        }
        if (productName != null) {
            responseCache.put(cacheKey, QueryType.GENERAL_PRODUCT.name());
            return QueryType.GENERAL_PRODUCT;
        }

        responseCache.put(cacheKey, QueryType.UNKNOWN.name());
        return QueryType.UNKNOWN;
    }

    private String handlePurchaseQuery(String normalizedQuery, String productName) {
        if (productName != null) {
            Optional<Product> product = findProduct(productName);
            if (product.isPresent()) {
                Product p = product.get();
                return buildFriendlyReply(
                        "Ch√†o b·∫°n! Website hi·ªán c√≥ b√°n s·∫£n ph·∫©m <strong>" + p.getProductName() + "</strong>.",
                        "Xem chi ti·∫øt t·∫°i <a href='http://localhost:9090/product-details/" + p.getProductId() + "' target='_blank'>ƒë√¢y</a>."
                );
            }
            return buildFriendlyReply("üìå Hi·ªán t·∫°i website ch∆∞a kinh doanh s·∫£n ph·∫©m <strong>" + productName + "</strong>.", null);
        }
        return buildFriendlyReply(
                "ƒê·ªÉ mua s·∫£n ph·∫©m tr√™n website, b·∫°n vui l√≤ng l√†m theo c√°c b∆∞·ªõc sau:",
                "<ol>" +
                        "<li><strong>ƒêƒÉng nh·∫≠p t√†i kho·∫£n</strong></li>" +
                        "<li><strong>Ch·ªçn s·∫£n ph·∫©m v√† cho v√†o gi·ªè h√†ng</strong></li>" +
                        "<li><strong>V√†o gi·ªè h√†ng v√† ·∫•n 'Thanh to√°n'</strong></li>" +
                        "<li><strong>ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin, ki·ªÉm tra ƒë∆°n h√†ng v√† √°p d·ª•ng khuy·∫øn m√£i (n·∫øu c√≥)</strong></li>" +
                        "<li><strong>Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n (ZaloPay, VNPay ho·∫∑c COD)</strong></li>" +
                        "<li><strong>Sau khi ho√†n t·∫•t, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n ƒë∆°n ƒë·∫∑t h√†ng</strong></li>" +
                        "</ol>" +
                        "Tham kh·∫£o chi ti·∫øt t·∫°i <a href='http://localhost:9090/shop' target='_blank'>li√™n k·∫øt n√†y</a>."
        );
    }

    private String handleAvailabilityQuery(String productName) {
        Optional<Product> product = findProduct(productName);
        if (product.isPresent()) {
            Product p = product.get();
            return buildFriendlyReply(
                    "Ch√†o b·∫°n! Website hi·ªán c√≥ b√°n s·∫£n ph·∫©m <strong>" + p.getProductName() + "</strong>.",
                    "Xem chi ti·∫øt t·∫°i <a href='http://localhost:9090/product-details/" + p.getProductId() + "' target='_blank'>ƒë√¢y</a>."
            );
        }
        return buildFriendlyReply("üìå Hi·ªán t·∫°i website ch∆∞a kinh doanh s·∫£n ph·∫©m <strong>" + productName + "</strong>.", null);
    }

    private String handleOpenQuestion(String originalQuery, String productName) {
        String gptResponse = fetchChatGPTResponseForOpenQuestion(originalQuery, productName);
        return buildFriendlyReply("Th√¥ng tin v·ªÅ " + (productName != null ? productName : "th·ª±c ph·∫©m"), gptResponse);
    }

    private String handleUsageQuery(String normalizedQuery, String productName) {
        if (productName == null) {
            return fetchChatGPTResponse("Li·ªát k√™ c√°c c√¥ng d·ª•ng chung c·ªßa th·ª±c ph·∫©m s·∫°ch ƒë·ªëi v·ªõi s·ª©c kh·ªèe.");
        }
        Optional<Product> product = findProduct(productName);
        if (product.isPresent()) {
            Product p = product.get();
            String usageInfo = p.getDescription();
            if (usageInfo != null && !usageInfo.isEmpty()) {
                log.info("Retrieved usageInfo for {} from database", p.getProductName());
                return buildFriendlyReply("C√¥ng d·ª•ng c·ªßa <strong>" + p.getProductName() + "</strong>", usageInfo);
            }
        }
        String gptUsage = fetchChatGPTUsage(productName);
        if (product.isPresent()) {
            Product p = product.get();
            p.setDescription(gptUsage);
            try {
                productRepository.save(p);
                log.info("Saved usageInfo for {} to database", p.getProductName());
            } catch (Exception e) {
                log.error("Failed to save usageInfo for {}: {}", p.getProductName(), e.getMessage());
            }
        }
        return buildFriendlyReply("C√¥ng d·ª•ng c·ªßa <strong>" + productName + "</strong>", gptUsage);
    }

    private String handleRecipeQuery(String normalizedQuery, String productName) {
        String dishName = extractDishName(normalizedQuery);
        if (dishName != null) {
            List<Blog> blogs = blogRepository.findAll().stream()
                    .filter(b -> normalizeText(b.getMarkdownContent() + " " + b.getTitle()).contains(dishName))
                    .collect(Collectors.toList());

            if (!blogs.isEmpty()) {
                String links = blogs.stream()
                        .map(b -> "‚Ä¢ <a href='http://localhost:9090/news/" + b.getSlug() + "' target='_blank'>" + b.getTitle() + "</a>")
                        .collect(Collectors.joining("<br>"));
                log.info("Found {} relevant blogs for dish: {}", blogs.size(), dishName);
                return buildFriendlyReply("ü•ó Tham kh·∫£o m√≥n ngon li√™n quan:", links);
            }
        }

        String recipeTarget = dishName != null ? dishName : productName;
        if (recipeTarget != null) {
            String recipe = fetchChatGPTRecipe(recipeTarget);
            return buildFriendlyReply("C√°ch l√†m m√≥n <strong>" + recipeTarget + "</strong>", recipe);
        }
        return "";
    }

    private String handleGeneralProductQuery(String productName) {
        Optional<Product> product = findProduct(productName);
        if (product.isPresent()) {
            Product p = product.get();
            return buildFriendlyReply(
                    "Th√¥ng tin s·∫£n ph·∫©m <strong>" + p.getProductName() + "</strong>",
                    p.getDescription() + "<br>Xem chi ti·∫øt t·∫°i <a href='http://localhost:9090/product-details/" + p.getProductId() + "' target='_blank'>li√™n k·∫øt n√†y</a>."
            );
        }
        return buildFriendlyReply("üìå Hi·ªán t·∫°i website ch∆∞a kinh doanh s·∫£n ph·∫©m <strong>" + productName + "</strong>.", null);
    }

    private String normalizeText(String text) {
        if (text == null) return "";
        return text.trim().toLowerCase().replaceAll("\\s+", " ");
    }

    private boolean isClearlyNonFoodRelated(String normalizedQuery) {
        return NON_FOOD_KEYWORDS.stream().anyMatch(normalizedQuery::contains);
    }

    private String extractProductName(String normalizedQuery) {
        String cacheKey = "product_name:" + normalizedQuery;
        String cachedName = responseCache.getIfPresent(cacheKey);
        if (cachedName != null) {
            return cachedName.equals("null") ? null : cachedName;
        }

        // Ki·ªÉm tra trong DB
        List<Product> products = productRepository.findAll();
        for (Product product : products) {
            String productName = normalizeText(product.getProductName());
            Pattern pattern = Pattern.compile("\\b" + Pattern.quote(productName) + "\\b", Pattern.CASE_INSENSITIVE);
            if (pattern.matcher(normalizedQuery).find()) {
                responseCache.put(cacheKey, product.getProductName());
                return product.getProductName();
            }
        }

        // G·ªçi ChatGPT
        String prompt = "Tr√≠ch xu·∫•t ch√≠nh x√°c t√™n s·∫£n ph·∫©m th·ª±c ph·∫©m (rau, c·ªß, qu·∫£, c√°, th·ªãt) b·∫±ng ti·∫øng Vi·ªát c√≥ d·∫•u t·ª´ c√¢u sau. " +
                "Ch·ªâ tr·∫£ v·ªÅ t√™n s·∫£n ph·∫©m, kh√¥ng th√™m t·ª´ n√†o. N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m, tr·∫£ v·ªÅ 'null'. C√¢u: \"" + normalizedQuery + "\"";
        try {
            String result = sendToChatGPT(prompt).trim();
            responseCache.put(cacheKey, result);
            return result.equals("null") ? null : result;
        } catch (Exception e) {
            log.error("Error extracting product name from GPT: {}", e.getMessage());
            return null;
        }
    }

    private String extractDishName(String normalizedQuery) {
        String cacheKey = "dish_name:" + normalizedQuery;
        String cachedDish = responseCache.getIfPresent(cacheKey);
        if (cachedDish != null) {
            return cachedDish.equals("null") ? null : cachedDish;
        }

        String[] dishPatterns = {"b√∫n x√†o chay", "m√≥n chay", "salad", "n∆∞·ªõc √©p", "sinh t·ªë", "c√° kho", "ph·ªü chay", "g·ªèi cu·ªën", "ch·∫£ gi√≤ chay"};
        for (String pattern : dishPatterns) {
            if (normalizedQuery.contains(pattern)) {
                responseCache.put(cacheKey, pattern);
                return pattern;
            }
        }

        String prompt = "Tr√≠ch xu·∫•t t√™n m√≥n ƒÉn b·∫±ng ti·∫øng Vi·ªát t·ª´ c√¢u sau, ch·ªâ tr·∫£ v·ªÅ t√™n m√≥n ƒÉn ho·∫∑c 'null' n·∫øu kh√¥ng c√≥. " +
                "V√≠ d·ª•: 'c√°ch l√†m c√° kho' -> 'c√° kho'. C√¢u: \"" + normalizedQuery + "\"";
        String dishName = sendToChatGPT(prompt).trim();
        responseCache.put(cacheKey, dishName);
        return dishName.equals("null") ? null : dishName;
    }

    private Optional<Product> findProduct(String productName) {
        String normalizedProductName = normalizeText(productName);
        List<Product> products = productRepository.findAll();
        for (Product p : products) {
            String dbName = normalizeText(p.getProductName());
            if (dbName.equals(normalizedProductName)) {
                return Optional.of(p);
            }
        }
        for (Product p : products) {
            String dbName = normalizeText(p.getProductName());
            if ((dbName.contains(normalizedProductName) || normalizedProductName.contains(dbName)) && normalizedProductName.length() > 4) {
                return Optional.of(p);
            }
        }
        return Optional.empty();
    }

    private String sendToChatGPT(String prompt) {
        String cacheKey = "gpt_response:" + normalizeText(prompt);
        String cachedResponse = responseCache.getIfPresent(cacheKey);
        if (cachedResponse != null) {
            log.info("Retrieved GPT response from cache for prompt: {}", prompt);
            return cachedResponse;
        }

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setBearerAuth(apiKey);
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", "gpt-4o");
        requestBody.put("messages", List.of(Map.of("role", "user", "content", prompt)));
        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);

        ResponseEntity<Map> response = restTemplate.postForEntity(
                "https://api.openai.com/v1/chat/completions", entity, Map.class);
        List<Map<String, Object>> choices = (List<Map<String, Object>>) response.getBody().get("choices");
        Map<String, Object> message = (Map<String, Object>) choices.get(0).get("message");
        String content = message.get("content").toString();
        responseCache.put(cacheKey, content);
        log.info("Fetched GPT response for prompt: {}", prompt);
        return content;
    }

    private String fetchChatGPTResponse(String query) {
        String prompt = "Tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† ch√≠nh x√°c b·∫±ng ti·∫øng Vi·ªát c√¢u h·ªèi sau li√™n quan ƒë·∫øn th·ª±c ph·∫©m: '" + query + "'. " +
                "C√¢u tr·∫£ l·ªùi ph·∫£i ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh v√† t·∫≠p trung v√†o ch·ªß ƒë·ªÅ th·ª±c ph·∫©m s·∫°ch, dinh d∆∞·ª°ng ho·∫∑c m√≥n ƒÉn.";
        return formatResponse(sendToChatGPT(prompt));
    }

    private String fetchChatGPTResponseForOpenQuestion(String query, String productName) {
        String prompt = "Tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† ch√≠nh x√°c b·∫±ng ti·∫øng Vi·ªát c√¢u h·ªèi sau: '" + query + "'. " +
                "C√¢u tr·∫£ l·ªùi ph·∫£i t·∫≠p trung v√†o '" + (productName != null ? productName : "th·ª±c ph·∫©m") + "' v√† ng·ªØ c·∫£nh c·ª• th·ªÉ (v√≠ d·ª•: s·ª©c kh·ªèe, ƒë·ªëi t∆∞·ª£ng nh∆∞ b√† b·∫ßu, tr·∫ª em).";
        return formatResponse(sendToChatGPT(prompt));
    }

    private String fetchChatGPTUsage(String productName) {
        String prompt = "Li·ªát k√™ ng·∫Øn g·ªçn c√°c c√¥ng d·ª•ng c·ªßa '" + productName + "' ƒë·ªëi v·ªõi s·ª©c kh·ªèe b·∫±ng ti·∫øng Vi·ªát.";
        return formatResponse(sendToChatGPT(prompt));
    }

    private String fetchChatGPTRecipe(String target) {
        String prompt = "G·ª£i √Ω m·ªôt m√≥n ƒÉn ƒë∆°n gi·∫£n c√≥ nguy√™n li·ªáu ch√≠nh l√† '" + target + "'. " +
                "Vi·∫øt ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát, li·ªát k√™ nguy√™n li·ªáu v√† c√°c b∆∞·ªõc th·ª±c hi·ªán.";
        return formatResponse(sendToChatGPT(prompt));
    }

    private String formatResponse(String content) {
        if (content == null || content.trim().isEmpty()) {
            return "Kh√¥ng c√≥ th√¥ng tin ƒë·ªÉ hi·ªÉn th·ªã.";
        }
        return content.replaceAll("\n", "<br>")
                .replaceAll("\\. ", ".<br>");
    }

    private String buildFriendlyReply(String title, String content) {
        StringBuilder reply = new StringBuilder();
        reply.append("<p>").append(title).append("</p>");
        if (content != null && !content.isEmpty()) {
            reply.append("<p><em>").append(content).append("</em></p>");
        }
        return reply.toString();
    }
}