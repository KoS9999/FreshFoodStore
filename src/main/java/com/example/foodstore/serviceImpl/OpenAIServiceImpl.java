package com.example.foodstore.serviceImpl;

import com.example.foodstore.entity.Blog;
import com.example.foodstore.entity.Product;
import com.example.foodstore.repository.BlogRepository;
import com.example.foodstore.repository.ProductRepository;
import com.example.foodstore.service.OpenAIService;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Service
public class OpenAIServiceImpl implements OpenAIService {

    private static final Logger log = LoggerFactory.getLogger(OpenAIServiceImpl.class);

    @Value("${openai.api.key}")
    private String apiKey;

    private final ProductRepository productRepository;
    private final BlogRepository blogRepository;

    private final Cache<String, String> gptCache = Caffeine.newBuilder()
            .expireAfterWrite(1, TimeUnit.DAYS)
            .maximumSize(1000)
            .build();

    private static final List<String> PURCHASE_KEYWORDS = Arrays.asList("mua", "b√°n", "ƒë·∫∑t", "gi√°", "thanh to√°n", "gi·ªè h√†ng");
    private static final List<String> AVAILABILITY_KEYWORDS = Arrays.asList("c√≥ b√°n", "c√≥ kinh doanh", "c√≥ kh√¥ng");
    private static final List<String> USAGE_KEYWORDS = Arrays.asList("c√¥ng d·ª•ng", "t√°c d·ª•ng", "l·ª£i √≠ch", "dinh d∆∞·ª°ng");
    private static final List<String> RECIPE_KEYWORDS = Arrays.asList("m√≥n", "n·∫•u", "k·∫øt h·ª£p", "c√°ch l√†m", "c√¥ng th·ª©c");

    public OpenAIServiceImpl(ProductRepository productRepository, BlogRepository blogRepository) {
        this.productRepository = productRepository;
        this.blogRepository = blogRepository;
    }

    @Override
    public String getChatBotReply(String userMessage) {
        String productName = extractProductNameLocally(userMessage);
        if (productName == null) {
            productName = extractProductNameFromGPT(userMessage);
        }

        if (!isRelevantToFood(userMessage) && productName == null) {
            return "ü§ñ Xin l·ªói, m√¨nh ch·ªâ h·ªó tr·ª£ c√°c n·ªôi dung li√™n quan ƒë·∫øn th·ª±c ph·∫©m s·∫°ch, s·∫£n ph·∫©m, m√≥n ƒÉn ho·∫∑c dinh d∆∞·ª°ng. " +
                    "B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi: 'C√°ch n·∫•u b√≠ ƒë·ªè', 'Rau n√†o t·ªët cho s·ª©c kh·ªèe?', ho·∫∑c 'Mua khoai t√¢y ·ªü ƒë√¢u?' üå±";
        }

        String internalReply = searchInternalData(userMessage, productName);
        if (!internalReply.isEmpty()) {
            return internalReply;
        }

        try {
            String gptReply = formatGPTContent(sendToGPT(userMessage));
            return buildFriendlyGPTReply("D∆∞·ªõi ƒë√¢y l√† th√¥ng tin tham kh·∫£o", null, gptReply);
        } catch (Exception e) {
            log.error("Error processing query '{}': {}", userMessage, e.getMessage());
            return "‚ö†Ô∏è Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    private String searchInternalData(String query, String productName) {
        String lowerQuery = normalizeProductName(query);
        log.info("Processing query: {}, productName: {}", query, productName);

        // Ki·ªÉm tra c√¢u h·ªèi v·ªÅ s·ª± t·ªìn t·∫°i s·∫£n ph·∫©m
        if (productName != null && AVAILABILITY_KEYWORDS.stream().anyMatch(lowerQuery::contains)) {
            Optional<Product> product = matchProductByGPTName(productName, productRepository.findAll());
            if (product.isPresent()) {
                Product p = product.get();
                return "Ch√†o b·∫°n! Website hi·ªán c√≥ b√°n s·∫£n ph·∫©m <strong>" + p.getProductName() + "</strong>. " +
                        "Xem chi ti·∫øt t·∫°i <a href='http://localhost:9090/product-details/" + p.getProductId() + "' target='_blank'>ƒë√¢y</a>.";
            } else {
                return "üìå Hi·ªán t·∫°i website ch∆∞a kinh doanh s·∫£n ph·∫©m <strong>" + productName + "</strong>.";
            }
        }

        // Ki·ªÉm tra c√¢u h·ªèi v·ªÅ quy tr√¨nh mua h√†ng
        if (PURCHASE_KEYWORDS.stream().anyMatch(lowerQuery::contains)) {
            if (productName != null) {
                Optional<Product> product = matchProductByGPTName(productName, productRepository.findAll());
                if (product.isPresent()) {
                    Product p = product.get();
                    return "Ch√†o b·∫°n! Website hi·ªán c√≥ b√°n s·∫£n ph·∫©m <strong>" + p.getProductName() + "</strong>. " +
                            "Xem chi ti·∫øt t·∫°i <a href='http://localhost:9090/product-details/" + p.getProductId() + "' target='_blank'>ƒë√¢y</a>.";
                } else {
                    return "üìå Hi·ªán t·∫°i website ch∆∞a kinh doanh s·∫£n ph·∫©m <strong>" + productName + "</strong>.";
                }
            }
            return "ƒê·ªÉ mua s·∫£n ph·∫©m tr√™n website, b·∫°n vui l√≤ng l√†m theo c√°c b∆∞·ªõc sau: <br><br>" +
                    "<ol>" +
                    "<li><strong>ƒêƒÉng nh·∫≠p t√†i kho·∫£n</strong></li>" +
                    "<li><strong>Ch·ªçn s·∫£n ph·∫©m v√† cho v√†o gi·ªè h√†ng</strong></li>" +
                    "<li><strong>V√†o gi·ªè h√†ng v√† ·∫•n 'Thanh to√°n'</strong></li>" +
                    "<li><strong>ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin, ki·ªÉm tra ƒë∆°n h√†ng v√† √°p d·ª•ng khuy·∫øn m√£i (n·∫øu c√≥)</strong></li>" +
                    "<li><strong>Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n (ZaloPay, VNPay ho·∫∑c COD)</strong></li>" +
                    "<li><strong>Sau khi ho√†n t·∫•t, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n ƒë∆°n ƒë·∫∑t h√†ng</strong></li>" +
                    "</ol>" +
                    "B·∫°n c√≥ th·ªÉ tham kh·∫£o chi ti·∫øt t·∫°i <a href='http://localhost:9090/shop' target='_blank'><strong>li√™n k·∫øt n√†y</strong></a>.";
        }

        if (productName != null || RECIPE_KEYWORDS.stream().anyMatch(lowerQuery::contains)) {
            Optional<Product> product = productName != null ?
                    matchProductByGPTName(productName, productRepository.findAll()) : Optional.empty();

            if (USAGE_KEYWORDS.stream().anyMatch(lowerQuery::contains)) {
                if (product.isPresent()) {
                    Product p = product.get();
                    String usageInfo = p.getDescription();
                    if (usageInfo != null && !usageInfo.isEmpty()) {
                        log.info("Retrieved usageInfo for {} from database", p.getProductName());
                        return buildFriendlyGPTReply("C√¥ng d·ª•ng c·ªßa", p.getProductName(), usageInfo);
                    } else {
                        String gptUsage = fetchUsageFromGPT(p.getProductName());
                        p.setDescription(gptUsage);
                        try {
                            productRepository.save(p);
                            log.info("Saved usageInfo for {} to database", p.getProductName());
                        } catch (Exception e) {
                            log.error("Failed to save usageInfo for {}: {}", p.getProductName(), e.getMessage());
                        }
                        return buildFriendlyGPTReply("C√¥ng d·ª•ng c·ªßa", p.getProductName(), gptUsage);
                    }
                } else {
                    // S·∫£n ph·∫©m kh√¥ng c√≥ trong database, g·ªçi ChatGPT ƒë·ªÉ l·∫•y c√¥ng d·ª•ng
                    String gptUsage = fetchUsageFromGPT(productName);
                    return buildFriendlyGPTReply("C√¥ng d·ª•ng c·ªßa", productName, gptUsage);
                }
            } else if (RECIPE_KEYWORDS.stream().anyMatch(lowerQuery::contains)) {
                // X·ª≠ l√Ω c√¥ng th·ª©c m√≥n ƒÉn
                List<String> dishKeywords = extractDishKeywords(query);
                String primaryDish = dishKeywords.isEmpty() ? null : dishKeywords.get(0);

                List<Blog> blogs = blogRepository.findAll().stream()
                        .filter(b -> {
                            String content = normalizeProductName(b.getMarkdownContent() + " " + b.getTitle());
                            return primaryDish != null && content.contains(primaryDish);
                        })
                        .collect(Collectors.toList());

                if (!blogs.isEmpty()) {
                    String links = blogs.stream()
                            .map(b -> "‚Ä¢ <a href='http://localhost:9090/news/" + b.getSlug() + "' target='_blank'>" + b.getTitle() + "</a>")
                            .collect(Collectors.joining("<br>"));
                    log.info("Found {} relevant blogs for dish: {}", blogs.size(), primaryDish);
                    return "ü•ó Tham kh·∫£o m√≥n ngon li√™n quan:<br>" + links;
                }

                String recipeName = primaryDish != null ? primaryDish : productName;
                if (recipeName != null) {
                    log.info("No relevant blogs found, fetching recipe for: {}", recipeName);
                    return buildFriendlyGPTReply("C√°ch l√†m m√≥n", recipeName, fetchSimpleRecipeFromGPT(recipeName));
                }
            }

            if (product.isPresent()) {
                Product p = product.get();
                return buildFriendlyGPTReply("Th√¥ng tin s·∫£n ph·∫©m", p.getProductName(),
                        p.getDescription() + "<br>Xem chi ti·∫øt t·∫°i " +
                                "<a href='http://localhost:9090/product-details/" + p.getProductId() + "' target='_blank'>li√™n k·∫øt n√†y</a>.");
            } else if (productName != null) {
                return "üìå Hi·ªán t·∫°i website ch∆∞a kinh doanh s·∫£n ph·∫©m <strong>" + productName + "</strong>.";
            }
        }
        return "";
    }




    private String normalizeProductName(String name) {
        if (name == null) return "";
        return name.trim().toLowerCase().replaceAll("\\s+", " ");
    }

    private List<String> extractDishKeywords(String userMessage) {
        List<String> keywords = new ArrayList<>();
        String lowerMessage = normalizeProductName(userMessage);

        String[] dishPatterns = {"b√∫n x√†o chay", "m√≥n chay", "salad", "n∆∞·ªõc √©p", "sinh t·ªë", "c√° kho", "ph·ªü chay", "g·ªèi cu·ªën", "ch·∫£ gi√≤ chay"};
        for (String pattern : dishPatterns) {
            if (lowerMessage.contains(pattern)) {
                keywords.add(pattern);
            }
        }

        if (keywords.isEmpty() && RECIPE_KEYWORDS.stream().anyMatch(lowerMessage::contains)) {
            String prompt = "H√£y tr√≠ch xu·∫•t t√™n m√≥n ƒÉn b·∫±ng ti·∫øng Vi·ªát t·ª´ c√¢u sau, ch·ªâ tr·∫£ v·ªÅ t√™n m√≥n ƒÉn ho·∫∑c 'null' n·∫øu kh√¥ng c√≥. " +
                    "V√≠ d·ª•: 'c√°ch l√†m c√° kho' -> 'c√° kho'. C√¢u: \"" + userMessage + "\"";
            String dishName = sendToGPT(prompt).trim();
            if (!dishName.equalsIgnoreCase("null") && !dishName.isEmpty()) {
                keywords.add(dishName);
            }
        }

        return keywords;
    }

    private String extractProductNameLocally(String message) {
        List<String> productNames = productRepository.findAll().stream()
                .map(Product::getProductName)
                .map(this::normalizeProductName)
                .collect(Collectors.toList());
        for (String name : productNames) {
            Pattern pattern = Pattern.compile("\\b" + Pattern.quote(name) + "\\b", Pattern.CASE_INSENSITIVE);
            if (pattern.matcher(normalizeProductName(message)).find()) {
                return name;
            }
        }
        return null;
    }

    private String extractProductNameFromGPT(String userMessage) {
        String prompt = "B·∫°n l√† tr·ª£ l√Ω cho website b√°n th·ª±c ph·∫©m s·∫°ch t·∫°i Vi·ªát Nam. " +
                "H√£y tr√≠ch xu·∫•t ch√≠nh x√°c t√™n s·∫£n ph·∫©m th·ª±c ph·∫©m (rau, c·ªß, qu·∫£, c√°, th·ªãt) b·∫±ng ti·∫øng Vi·ªát c√≥ d·∫•u t·ª´ c√¢u ng∆∞·ªùi d√πng n·∫øu c√≥. " +
                "Ch·ªâ tr·∫£ v·ªÅ t√™n s·∫£n ph·∫©m, kh√¥ng th√™m b·∫•t k·ª≥ t·ª´ n√†o. N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o, ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng chu·ªói: null.\n\n" +
                "C√¢u: \"" + userMessage + "\"";
        try {
            String result = sendToGPT(prompt).trim();
            if (result.equalsIgnoreCase("null") || result.isEmpty()) return null;
            return normalizeProductName(result);
        } catch (Exception e) {
            return null;
        }
    }

    private Optional<Product> matchProductByGPTName(String gptName, List<Product> products) {
        String gptClean = normalizeProductName(gptName);
        for (Product p : products) {
            String dbName = normalizeProductName(p.getProductName());
            if (dbName.equals(gptClean)) return Optional.of(p);
        }
        for (Product p : products) {
            String dbName = normalizeProductName(p.getProductName());
            if ((dbName.contains(gptClean) || gptClean.contains(dbName)) && gptClean.length() > 4) {
                return Optional.of(p);
            }
        }
        return Optional.empty();
    }

    private boolean isRelevantToFood(String message) {
        String lower = normalizeProductName(message);
        return lower.contains("ƒÉn") || lower.contains("m√≥n") || lower.contains("th·ª±c ph·∫©m")
                || lower.contains("n·∫•u") || lower.contains("rau") || lower.contains("c·ªß")
                || lower.contains("tr√°i c√¢y") || lower.contains("nguy√™n li·ªáu")
                || lower.contains("ch·∫ø bi·∫øn") || lower.contains("mua")
                || lower.contains("th·ª±c ƒë∆°n") || lower.contains("dinh d∆∞·ª°ng")
                || lower.contains("t√°c d·ª•ng") || lower.contains("c√¥ng d·ª•ng")
                || lower.contains("thanh to√°n") || lower.contains("s·ª©c kh·ªèe")
                || lower.contains("vitamin") || lower.contains("kho√°ng ch·∫•t")
                || lower.contains("ch·∫ø ƒë·ªô ƒÉn");
    }

    private String sendToGPT(String prompt) {
        String normalizedPrompt = normalizeProductName(prompt);
        return gptCache.get(normalizedPrompt, p -> {
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBearerAuth(apiKey);
            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("model", "gpt-4o");
            requestBody.put("messages", List.of(Map.of("role", "user", "content", p)));
            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<Map> response = restTemplate.postForEntity(
                    "https://api.openai.com/v1/chat/completions", entity, Map.class);
            List<Map<String, Object>> choices = (List<Map<String, Object>>) response.getBody().get("choices");
            Map<String, Object> message = (Map<String, Object>) choices.get(0).get("message");
            String content = message.get("content").toString();
            log.info("Fetched from GPT for prompt: {}", p);
            return content;
        });
    }

    private String formatGPTContent(String gptContent) {
        if (gptContent == null || gptContent.trim().isEmpty()) {
            return "Kh√¥ng c√≥ th√¥ng tin ƒë·ªÉ hi·ªÉn th·ªã.";
        }
        return gptContent.replaceAll("\n", "<br>")
                .replaceAll("\\. ", ".<br>");
    }

    private String buildFriendlyGPTReply(String title, String name, String content) {
        StringBuilder reply = new StringBuilder();
        reply.append("<p>").append(title);
        if (name != null) {
            reply.append(" <strong>").append(name).append("</strong>");
        }
        reply.append(":</p><p><em>").append(content).append("</em></p>");
        return reply.toString();
    }

    private String fetchSimpleRecipeFromGPT(String productName) {
        String prompt = "H√£y g·ª£i √Ω m·ªôt m√≥n ƒÉn ƒë∆°n gi·∫£n c√≥ nguy√™n li·ªáu l√† '" + productName + "'. " +
                "Vi·∫øt ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát, li·ªát k√™ nguy√™n li·ªáu v√† c√°c b∆∞·ªõc th·ª±c hi·ªán.";
        return formatGPTContent(sendToGPT(prompt));
    }

    private String fetchUsageFromGPT(String productName) {
        String normalizedName = normalizeProductName(productName);
        String cacheKey = "usage:" + normalizedName;
        String cachedUsage = gptCache.getIfPresent(cacheKey);
        if (cachedUsage != null) {
            log.info("Retrieved usage for {} from cache", normalizedName);
            return cachedUsage;
        }

        String prompt = "H√£y li·ªát k√™ ng·∫Øn g·ªçn c√°c c√¥ng d·ª•ng c·ªßa '" + productName + "' ƒë·ªëi v·ªõi s·ª©c kh·ªèe b·∫±ng ti·∫øng Vi·ªát.";
        String usage = formatGPTContent(sendToGPT(prompt));
        gptCache.put(cacheKey, usage);
        log.info("Fetched and cached usage for {}", normalizedName);
        return usage;
    }
}