package com.example.foodstore.serviceImpl;

import com.example.foodstore.entity.Blog;
import com.example.foodstore.entity.Product;
import com.example.foodstore.repository.BlogRepository;
import com.example.foodstore.repository.ProductRepository;
import com.example.foodstore.service.OpenAIService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class OpenAIServiceImpl implements OpenAIService {

    @Value("${openai.api.key}")
    private String apiKey;

    private final ProductRepository productRepository;
    private final BlogRepository blogRepository;

    public OpenAIServiceImpl(ProductRepository productRepository, BlogRepository blogRepository) {
        this.productRepository = productRepository;
        this.blogRepository = blogRepository;
    }

    @Override
    public String getChatBotReply(String userMessage) {
        String productName = extractProductNameFromGPT(userMessage);

        if (!isRelevantToFood(userMessage) && productName == null) {
            return "ü§ñ Xin l·ªói, m√¨nh ch·ªâ h·ªó tr·ª£ c√°c n·ªôi dung li√™n quan ƒë·∫øn th·ª±c ph·∫©m s·∫°ch, s·∫£n ph·∫©m, m√≥n ƒÉn ho·∫∑c dinh d∆∞·ª°ng. " +
                    "B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi: 'C√°ch n·∫•u b√≠ ƒë·ªè', 'Rau n√†o t·ªët cho s·ª©c kh·ªèe?', ho·∫∑c 'Mua khoai t√¢y ·ªü ƒë√¢u?' üå±";
        }

        String internalReply = searchInternalData(userMessage);
        if (!internalReply.isEmpty()) return internalReply;

        try {
            String gptReply = sendToGPT(userMessage);

            Optional<Product> matched = productName != null ?
                    matchProductByGPTName(productName, productRepository.findAll()) : Optional.empty();

            if (productName != null && matched.isEmpty()) {
                return "üìå Hi·ªán t·∫°i website ch∆∞a kinh doanh s·∫£n ph·∫©m <strong>" + productName + "</strong>.<br>"
                        + "Tuy nhi√™n, b·∫°n c√≥ th·ªÉ tham kh·∫£o th√™m th√¥ng tin sau:<br><br><em>" + gptReply + "</em>";
            }

            return buildFriendlyGPTReply("D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë th√¥ng tin b·∫°n c√≥ th·ªÉ tham kh·∫£o", null, gptReply);

        } catch (Exception e) {
            return "‚ö†Ô∏è Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    private String searchInternalData(String query) {
        String lowerQuery = query.toLowerCase();

        if (lowerQuery.contains("thanh to√°n") || lowerQuery.contains("gi·ªè h√†ng") || lowerQuery.contains("c√°ch mua h√†ng")) {
            return "‚úÖ ƒê·ªÉ mua s·∫£n ph·∫©m tr√™n website, b·∫°n vui l√≤ng l√†m theo c√°c b∆∞·ªõc sau: <br><br>"
                    + "<ol>"
                    + "<li><strong>ƒêƒÉng nh·∫≠p t√†i kho·∫£n</strong></li>"
                    + "<li><strong>Ch·ªçn s·∫£n ph·∫©m v√† cho v√†o gi·ªè h√†ng</strong></li>"
                    + "<li><strong>V√†o gi·ªè h√†ng v√† ·∫•n 'Checkout'</strong></li>"
                    + "<li><strong>ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin, ki·ªÉm tra ƒë∆°n h√†ng v√† √°p d·ª•ng khuy·∫øn m√£i (n·∫øu c√≥)</strong></li>"
                    + "<li><strong>Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n (COD ho·∫∑c ZaloPay)</strong></li>"
                    + "<li><strong>Sau khi ho√†n t·∫•t, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n ƒë∆°n ƒë·∫∑t h√†ng</strong></li>"
                    + "</ol>"
                    + "B·∫°n c√≥ th·ªÉ tham kh·∫£o chi ti·∫øt v·ªÅ c√°c s·∫£n ph·∫©m t·∫°i "
                    + "<a href='http://localhost:9090/shop' target='_blank'><strong>li√™n k·∫øt n√†y</strong></a>.";
        }

        String productName = extractProductNameFromGPT(query);
        if (productName == null) return "";

        List<Product> products = productRepository.findAll();
        Optional<Product> matched = matchProductByGPTName(productName, products);

        if (matched.isPresent()) {
            Product p = matched.get();
            String name = p.getProductName();

            if (lowerQuery.contains("mua") || lowerQuery.contains("b√°n") || lowerQuery.contains("ƒë·∫∑t") || lowerQuery.contains("gi√°")) {
                return "‚úÖ Website hi·ªán c√≥ b√°n s·∫£n ph·∫©m <strong>" + name + "</strong>. "
                        + "B·∫°n c√≥ th·ªÉ xem chi ti·∫øt t·∫°i "
                        + "<a href='http://localhost:9090/product-details/" + p.getProductId()
                        + "' target='_blank'>li√™n k·∫øt n√†y</a>.";
            }

            if (lowerQuery.contains("c√¥ng d·ª•ng") || lowerQuery.contains("t√°c d·ª•ng")) {
                return buildFriendlyGPTReply("C√¥ng d·ª•ng c·ªßa s·∫£n ph·∫©m", name, p.getDescription());
            }

            if (lowerQuery.contains("m√≥n") || lowerQuery.contains("n·∫•u") || lowerQuery.contains("k·∫øt h·ª£p") ||
                    lowerQuery.contains("c√°ch l√†m") || lowerQuery.contains("b√†i vi·∫øt") || lowerQuery.contains("c√¥ng th·ª©c")) {
                List<Blog> blogs = blogRepository.findAll().stream()
                        .filter(b -> {
                            String content = (b.getMarkdownContent() + " " + b.getTitle()).toLowerCase();
                            return content.contains(name.toLowerCase());
                        })
                        .collect(Collectors.toList());

                if (!blogs.isEmpty()) {
                    String links = blogs.stream()
                            .map(b -> "‚Ä¢ <a href='http://localhost:9090/news/" + b.getSlug()
                                    + "' target='_blank'>" + b.getTitle() + "</a>")
                            .collect(Collectors.joining("<br>"));

                    return "ü•ó B·∫°n c√≥ th·ªÉ tham kh·∫£o m√≥n ngon t·ª´ <strong>" + name + "</strong> d∆∞·ªõi ƒë√¢y nh√©:<br>" + links;
                }

                String gptRecipe = fetchSimpleRecipeFromGPT(name);
                return buildFriendlyGPTReply("B·∫°n c√≥ th·ªÉ tham kh·∫£o v·ªÅ m√≥n ƒÉn v·ªõi", name, gptRecipe);
            }

            return buildFriendlyGPTReply("Th√¥ng tin s·∫£n ph·∫©m", name,
                    p.getDescription() + "<br>Xem chi ti·∫øt t·∫°i "
                            + "<a href='http://localhost:9090/product-details/" + p.getProductId()
                            + "' target='_blank'>li√™n k·∫øt n√†y</a>.");
        }

        return "";
    }

    private Optional<Product> matchProductByGPTName(String gptName, List<Product> products) {
        String gptClean = gptName.trim().toLowerCase();

        for (Product p : products) {
            String dbName = p.getProductName().trim().toLowerCase();
            if (dbName.equals(gptClean)) return Optional.of(p);
        }

        for (Product p : products) {
            String dbName = p.getProductName().trim().toLowerCase();
            if ((dbName.contains(gptClean) || gptClean.contains(dbName)) && gptClean.length() > 4) {
                return Optional.of(p);
            }
        }

        return Optional.empty();
    }

    private String buildFriendlyGPTReply(String title, String name, String content) {
        return title + (name != null ? " <strong>" + name + "</strong>:" : ":") + "<br><br><em>" + content + "</em>";
    }

    private String sendToGPT(String prompt) {
        RestTemplate restTemplate = new RestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setBearerAuth(apiKey);

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", "gpt-4o");
        requestBody.put("messages", List.of(Map.of("role", "user", "content", prompt)));

        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);

        ResponseEntity<Map> response = restTemplate.postForEntity(
                "https://api.openai.com/v1/chat/completions",
                entity,
                Map.class
        );

        List<Map<String, Object>> choices = (List<Map<String, Object>>) response.getBody().get("choices");
        Map<String, Object> message = (Map<String, Object>) choices.get(0).get("message");

        return message.get("content").toString();
    }

    private String extractProductNameFromGPT(String userMessage) {
        String prompt = "B·∫°n l√† tr·ª£ l√Ω cho website b√°n th·ª±c ph·∫©m s·∫°ch t·∫°i Vi·ªát Nam. " +
                "H√£y tr√≠ch xu·∫•t ch√≠nh x√°c t√™n s·∫£n ph·∫©m th·ª±c ph·∫©m (rau, c·ªß, qu·∫£, c√°, th·ªãt) b·∫±ng ti·∫øng Vi·ªát c√≥ d·∫•u t·ª´ c√¢u ng∆∞·ªùi d√πng n·∫øu c√≥. " +
                "Ch·ªâ tr·∫£ v·ªÅ t√™n s·∫£n ph·∫©m, kh√¥ng th√™m b·∫•t k·ª≥ t·ª´ n√†o. N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o, ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng chu·ªói: null.\n\n" +
                "C√¢u: \"" + userMessage + "\"";

        try {
            String result = sendToGPT(prompt).trim();
            if (result.equalsIgnoreCase("null") || result.isEmpty()) return null;
            return result;
        } catch (Exception e) {
            return null;
        }
    }

    private boolean isRelevantToFood(String message) {
        String lower = message.toLowerCase();
        return lower.contains("ƒÉn") || lower.contains("m√≥n") || lower.contains("th·ª±c ph·∫©m")
                || lower.contains("n·∫•u") || lower.contains("rau") || lower.contains("c·ªß")
                || lower.contains("tr√°i c√¢y") || lower.contains("nguy√™n li·ªáu")
                || lower.contains("ch·∫ø bi·∫øn") || lower.contains("mua")
                || lower.contains("th·ª±c ƒë∆°n") || lower.contains("dinh d∆∞·ª°ng")
                || lower.contains("t√°c d·ª•ng") || lower.contains("c√¥ng d·ª•ng")
                || lower.contains("thanh to√°n");
    }

    private String fetchSimpleRecipeFromGPT(String productName) {
        String prompt = "H√£y g·ª£i √Ω m·ªôt m√≥n ƒÉn ƒë∆°n gi·∫£n c√≥ nguy√™n li·ªáu l√† '" + productName + "'. " +
                "Vi·∫øt ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát, li·ªát k√™ nguy√™n li·ªáu v√† c√°c b∆∞·ªõc th·ª±c hi·ªán.";
        return sendToGPT(prompt);
    }
}